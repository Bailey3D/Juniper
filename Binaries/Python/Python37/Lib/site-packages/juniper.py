"""
:script
:type startup
:desc This script is responsible for hooking the "real" juniper library to the standalone python interpreter
:desc This same script can be used to hook an external Python install to the Juniper workspace
:desc and makes it as simple as running `import juniper` to run the juniper startup process.
"""
import json
import os
import sys
from importlib.machinery import SourceFileLoader


sys.modules["__juniper_hook"] = sys.modules.pop("juniper")
os.environ["PYTHONVERBOSE"] = "1"


def get_argument(key):
    for i in sys.argv:
        if(i.startswith(f"juniper:{key}=")):
            return i.split("=")[1]
    return None

def set_argument(key, value):
    for i in reversed(sys.argv):
        if(i.startswith(f"juniper:{key}=")):
            sys.argv.remove(i)
    sys.argv.append(f"juniper:{key}={value}")


def root():
    return os.path.abspath(os.path.dirname(__file__) + "..\\..\\..\\..\\..\\..")


if(os.path.isdir(root())):
    if(not get_argument("program_context")):
        set_argument("program_context", "python")

    if(not get_argument("startup")):
        set_argument("startup", "true")

    bootstrap_path = os.path.join(
        root(),
        "Source\\Libs\\Python\\juniper\\bootstrap\\__init__.py"
    )
    bootstrap = SourceFileLoader("juniper_bootstrap", bootstrap_path).load_module("juniper_bootstrap")
    bootstrap.Bootstrap()

