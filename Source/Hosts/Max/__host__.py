"""
Base implementation for Juniper support in 3DS Max (2021+)
"""
import os

import juniper.engine


class Max(juniper.engine.JuniperEngine):
    def on_startup(self):
        """
        Adds the `pymxs.juniper` package to `pymxs.__path__`
        """
        import pymxs
        pymxs.__path__.append(os.path.join(
            self.workspace_root,
            "Source\\Hosts\\Max\\Source\\Libs\\Python\\pymxs"
        ))

    def on_install(self):
        """
        Installs the Juniper bootstrap to 3ds max startup.
        MaxScript is currently required to run the bootstrap, so a stub file is also created.
        """
        maxscript_startup_lines = """
        -- !Auto-generated by Juniper
        ( python.ExecuteFile (substituteString (getThisScriptFileName()) ".ms" ".py") )
        """

        for i in range(2021, 2026):
            if(os.path.isdir(juniper.paths.root())):
                appdata_dir = os.path.join("c:\\users\\", os.getlogin(), f"appdata\\local\\autodesk\\3dsmax\\{i} - 64bit")
                if(os.path.isdir(appdata_dir)):
                    startup_folder = os.path.join(appdata_dir, "ENU\\scripts\\startup")
                    self.create_bootstrap_file(os.path.join(startup_folder, "__juniper_startup__.py"))
                    with open(os.path.join(startup_folder, "__juniper_startup__.ms"), "w") as f:
                        f.write(maxscript_startup_lines)

    def run_file(self, file_path):
        """
        Override for `run_file` to add in support for maxscript
        """
        if(file_path.endswith(".ms")):
            import pymxs
            with open(file_path, "r") as f:
                file_lines = f.read()
                pymxs.runtime.execute(file_lines)
            return True
        return super().run_file(file_path)

    def get_main_window(self):
        import qtmax
        return qtmax.GetQMaxMainWindow()
